name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DATABASE_URL: file:./test.db
  NODE_VERSION: '24'
  HUSKY: 0 # Disable Husky in CI environment

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node environment
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build project (generates Paraglide files)
        run: npm run build

      - name: Run format check
        run: npm run format

      - name: Run lint check
        run: npm run lint

      - name: Run type check
        run: npm run check

      - name: Run unit tests
        run: npm run test:unit

      - name: Run E2E tests
        run: npm run test:e2e

  deploy:
    name: Deploy to Cloudflare Workers
    needs: test
    runs-on: ubuntu-latest

    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node environment
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build application
        run: npm run build

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Create GitHub deployment
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              description: 'Deploy to Cloudflare Workers'
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: `https://aqua-note.${process.env.CF_ACCOUNT_SUBDOMAIN}.workers.dev`,
              description: 'Deployment successful'
            });
        env:
          CF_ACCOUNT_SUBDOMAIN: ${{ secrets.CLOUDFLARE_ACCOUNT_SUBDOMAIN }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Successfully deployed to production!"
          echo "URL: https://aqua-note.${{ secrets.CLOUDFLARE_ACCOUNT_SUBDOMAIN }}.workers.dev"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment to production failed!"
          echo "Please check the logs for details."
